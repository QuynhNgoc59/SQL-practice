Table: ProductPurchases
+-------------+------+
| Column Name | Type | 
+-------------+------+
| user_id     | int  |
| product_id  | int  |
| quantity    | int  |
+-------------+------+
(user_id, product_id) is the unique identifier for this table. 
Each row represents a purchase of a product by a user in a specific quantity.
Table: ProductInfo
+-------------+---------+
| Column Name | Type    | 
+-------------+---------+
| product_id  | int     |
| category    | varchar |
| price       | decimal |
+-------------+---------+
product_id is the unique identifier for this table.
Each row assigns a category and price to a product.
Amazon wants to understand shopping patterns across product categories. Write a solution to:

Find all category pairs (where category1 < category2)
For each category pair, determine the number of unique customers who purchased products from both categories
A category pair is considered reportable if at least 3 different customers have purchased products from both categories.
Return the result table of reportable category pairs ordered by customer_count in descending order, and in case of a tie, by category1 in ascending order lexicographically, and then by category2 in ascending order.

==> My approach:
WITH CTE AS (
    SELECT pur.user_id 
         , pur.product_id
         , pur.quantity
         , pro.category    
    FROM ProductPurchases AS pur
    JOIN ProductInfo AS pro
    ON pur.product_id = pro.product_id  
)
SELECT c1.category AS category1
     , c2.category AS category2
     , COUNT(DISTINCT c2.user_id) AS customer_count
FROM CTE AS c1
JOIN CTE AS c2 ON c1.user_id = c2.user_id
WHERE c1.category < c2.category
GROUP BY c1.category, c2.category
HAVING COUNT(DISTINCT c2.user_id) >= 3
ORDER BY customer_count DESC, category1 ASC, category2 ASC;

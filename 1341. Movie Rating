Table: Movies
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| title         | varchar |
+---------------+---------+
movie_id is the primary key (column with unique values) for this table.
title is the name of the movie.

Table: Users
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| user_id       | int     |
| name          | varchar |
+---------------+---------+
user_id is the primary key (column with unique values) for this table.
The column 'name' has unique values.

Table: MovieRating
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| movie_id      | int     |
| user_id       | int     |
| rating        | int     |
| created_at    | date    |
+---------------+---------+
(movie_id, user_id) is the primary key (column with unique values) for this table.
This table contains the rating of a movie by a user in their review.
created_at is the user's review date. 
 
Write a solution to:
Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.
The result format is in the following example.

==> My approach:
WITH CTE1 AS (SELECT TOP 1 MR.user_id
                   , name
                   , COUNT(rating) AS Num_rating
              FROM MovieRating AS MR
              JOIN Users AS U ON MR.user_id = U.user_id
              GROUP BY MR.user_id, name
              ORDER BY Num_rating DESC, name ASC)
   , 
     CTE2 AS (SELECT TOP 1 MR.movie_id 
                   , title 
                   , AVG(CAST(rating AS FLOAT)) AS Avg_rating
              FROM MovieRating AS MR
              JOIN Movies AS M ON MR.movie_id = M.movie_id
              WHERE YEAR(created_at) =2020 AND MONTH(created_at) =2
              GROUP BY MR.movie_id, title
              ORDER BY Avg_rating DESC, title ASC)

SELECT name AS results
FROM CTE1
UNION ALL
SELECT title AS results
FROM CTE2
